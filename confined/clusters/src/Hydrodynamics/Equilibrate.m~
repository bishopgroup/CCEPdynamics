function part = Equilibrate(param,mesh,part,adjmat)
%{
%}

qMat = zeros(part.Np);
UMat = zeros(part.Np);
Urhs = zeros(part.Np,1);
wall = diag(adjmat);
[S, C] = graphconncomp(adjmat);
for cc = 1:S % step through connected components
    ccidx = find(C == cc);
    if any(wall(ccidx) == 2) % in contact with lower wall
        UMat(ccidx,ccidx) = 1;
        Urhs(ccidx) = part.x123(3,ccidx);
    elseif any(wall(ccidx) == 3) % in contact with upper wall
        UMat(ccidx,ccidx) = 1;
        Urhs(ccidx) = part.x123(3,ccidx) - param.L3;
    else % in contact with no walls
        qMat(ccidx(1),ccidx) = 1; % sum of the charges is constant
        for i = 2:length(ccidx)
            UMat(ccidx(i),ccidx(i-1)) = 1;
            UMat(ccidx(i),ccidx(i)) = -1;
            Urhs(ccidx(i)) = part.x123(3,ccidx(i-1)) - part.x123(3,ccidx(i));
        end
    end
end

% Compute Near Field Capacitance Matrix
Cnf = CNearField(param,part);

% Assembly Right-hand-side
b = zeros(4*part.Np,1);
b(1:part.Np) = qMat*part.q + Urhs;
b(part.Np+1:end) = reshape(part.Eo,3*part.Np,1);

% Solve for Far Field Charge and Dipole Moments, qff and pff
x0 = [part.qff; reshape(part.pff,3*part.Np,1)];  % initial guess
tol = 1e-6;  % tolerance

[x,flag,relres,iter,resvec] = gmres(@(x)afun(x,param,mesh,part,Cnf,qMat,UMat),...
    b,[],tol,[],[],[],x0);

part.qff = x(1:part.Np);
part.pff = reshape(x(part.Np+1:end),3,part.Np);

if flag ~= 0
    fprintf('Houston, we have a problem: flag = %d\n',flag);
    semilogy(1:length(resvec),resvec,'-o');
    xlabel('Iteration number');
    ylabel('Relative residual');
    return
end

% Complete Solution for Potential
[Ul,GradUl] = PFarFieldReal(param,part);      % Real Space Part
[Ug,GradUg] = PFarFieldWave(param,mesh,part); % Wave Space Part
[Us,GradUs] = PFarFieldSelf(param,part);      % Self-Induction Correction
part.U = Ul + Ug + Us;

% Compute "Total" Dipole Moment
UE = [part.U; reshape(part.Eo,3*part.Np,1)];
qp = x + Cnf*UE;
part.q = qp(1:part.Np);
part.p = reshape(qp(part.Np+1:end),3,part.Np);

% Compute Electrostatic Energy
part.Ues = 0.5*(sum(part.q .* part.U) - sum(dot(part.p,part.Eo,1))) ...
    - sum(part.x123(3,:) .* part.q');

%--------------------------------------------------------------------------
function Ab = afun(x,param,mesh,part,Cnf,qMat,UMat)

part.qff = x(1:part.Np);
part.pff = reshape(x(part.Np+1:end),3,part.Np);

[Ul,GradUl] = PFarFieldReal(param,part);      % Real Space Part
[Ug,GradUg] = PFarFieldWave(param,mesh,part); % Wave Space Part
[Us,GradUs] = PFarFieldSelf(param,part);      % Self-Induction Correction

% Combine
U = Ul + Ug + Us;
GradU = GradUl + GradUg + GradUs;

% Compute "Total" Charge and Dipole Moments
UE = [U; reshape(GradU,3*part.Np,1)];
q = part.qff + Cnf(1:part.Np,:)*UE;

% Residuals 
Ab = zeros(4*part.Np,1);
Ab(1:part.Np) = qMat*q + UMat*U;
Ab(part.Np+1:end) = reshape(GradU,3*part.Np,1);
